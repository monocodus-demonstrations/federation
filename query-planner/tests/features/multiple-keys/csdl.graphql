schema
  @graph(name: "users", url: "undefined")
  @graph(name: "reviews", url: "undefined")
  @graph(name: "actuary", url: "undefined")
  @composedGraph(version: 1)
{
  query: Query
}

directive @composedGraph(version: Int!) on SCHEMA

directive @graph(name: String!, url: String!) on SCHEMA

directive @owner(graph: String!) on OBJECT

directive @key(fields: String!, graph: String!) on OBJECT

directive @resolve(graph: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

type Group {
  id: ID
  name: String
}

type Query {
  users: [User!]! @resolve(graph: "users")
  reviews: [Review!]! @resolve(graph: "reviews")
}

type Review {
  id: ID!
  author: User!
  body: String!
}

type User
  @owner(graph: "users")
  @key(fields: "{ ssn }", graph: "users")
  @key(fields: "{ id }", graph: "users")
  @key(fields: "{ group { id } }", graph: "users")
  @key(fields: "{ id }", graph: "reviews")
  @key(fields: "{ ssn }", graph: "actuary")
{
  id: ID!
  ssn: ID!
  name: String!
  group: Group
  reviews: [Review!]! @resolve(graph: "reviews")
  risk: Float @resolve(graph: "actuary")
}
